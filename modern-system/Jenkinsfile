// Jenkinsfile
// Pipeline for deploying the modern banking system
// This integrates with GitHub Actions CI and handles the deployment (CD) part

pipeline {
    agent any
    
    parameters {
        choice(
            name: 'ENVIRONMENT',
            choices: ['dev', 'prod'],
            description: 'Deployment environment'
        )
        booleanParam(
            name: 'RUN_TESTS',
            defaultValue: true,
            description: 'Run smoke tests after deployment'
        )
    }
    
    environment {
        GITHUB_REPO = 'kushmirc/banking-modernization'
        EC2_HOST = '13.223.22.205'
        APP_PORT = '8083'
        EC2_USER = 'ubuntu'
        JAR_NAME = 'banking-modern-0.0.1-SNAPSHOT.jar'
        REMOTE_DIR = '/opt/banking-modernization'
    }

    stages {

        stage('Build Application') {  // Renamed from 'Download Artifacts'
            steps {
                echo 'Building application locally...'
                sh '''
                    cd modern-system
                    # Clean previous builds
                    rm -rf target/
                    # Build fresh JAR
                    ./mvnw clean package -DskipTests
                    # Verify JAR was created
                    ls -la target/*.jar
                '''
            }
        }
        
        stage('Deploy to EC2') {
            steps {
                echo "Deploying to ${params.ENVIRONMENT} environment..."

                // Using withCredentials instead of sshagent (works without SSH Agent plugin)
                withCredentials([sshUserPrivateKey(credentialsId: 'ec2-ssh-key', keyFileVariable: 'SSH_KEY', usernameVariable: 'SSH_USER')]) {
                    sh """
                        # Copy JAR to EC2 tmp (using specific JAR name)
                        scp -i \$SSH_KEY -o StrictHostKeyChecking=no modern-system/target/${JAR_NAME} \$SSH_USER@${EC2_HOST}:/tmp/

                        # Copy deployment script
                        scp -i \$SSH_KEY -o StrictHostKeyChecking=no scripts/modern/deploy-modern.sh \$SSH_USER@${EC2_HOST}:/tmp/

                        # Move files and run deployment (matching manual process)
                        ssh -i \$SSH_KEY -o StrictHostKeyChecking=no \$SSH_USER@${EC2_HOST} '
                            sudo cp /tmp/${JAR_NAME} ${REMOTE_DIR}/modern-system/target/
                            sudo cp /tmp/deploy-modern.sh ${REMOTE_DIR}/scripts/
                            chmod +x ${REMOTE_DIR}/scripts/deploy-modern.sh
                            cd ${REMOTE_DIR}/scripts
                            ./deploy-modern.sh ${params.ENVIRONMENT}'
                        """
                }
            }
        }
        
        stage('Smoke Tests') {
            when {
                expression { params.RUN_TESTS == true }
            }
            steps {
                echo 'Running smoke tests...'
                script {
                    // Simple smoke test - check if app is responding
                    def response = sh(
                        script: "curl -s -o /dev/null -w '%{http_code}' http://${EC2_HOST}:${APP_PORT}/actuator/health",
                        returnStdout: true
                    ).trim()
                    
                    if (response == '200') {
                        echo '✓ Health check passed'
                    } else {
                        error '✗ Health check failed'
                    }
                }
            }
        }
    }
    
    post {
        success {
            echo 'Deployment successful!'
            // Could add Slack notification here
        }
        failure {
            echo 'Deployment failed!'
            // Could trigger rollback or send alerts
        }
        always {
            echo "Deployment finished at: ${new Date()}"
        }
    }
}