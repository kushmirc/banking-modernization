name: Modern Banking System CI

# This workflow handles Continuous Integration (automated testing and building)
# but NOT Continuous Deployment (which remains manual for compliance/control)

on:
  push:
    paths:
      - 'modern-system/**'
      - '.github/workflows/modern-system-ci.yml'
  pull_request:
    paths:
      - 'modern-system/**'

jobs:
  test-and-build:
    runs-on: ubuntu-latest
    
    # Define outputs that can be used by deployment scripts
    outputs:
      artifact-name: ${{ steps.artifact.outputs.name }}
      build-number: ${{ github.run_number }}
    
    steps:
      # Step 1: Checkout the code
      - name: Checkout code
        uses: actions/checkout@v4
      
      # Step 2: Set up Java 17 (matching our pom.xml)
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
      
      # Step 3: Cache Maven dependencies for faster builds
      - name: Cache Maven dependencies
        uses: actions/cache@v3
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-
      
      # Step 4: Validate Maven project structure
      - name: Validate Maven project
        working-directory: ./modern-system
        run: mvn validate
      
      # Step 5: Compile the code
      - name: Compile
        working-directory: ./modern-system
        run: mvn compile
      
      # Step 6: Run tests (none yet, but ready when we add them)
      - name: Run tests
        working-directory: ./modern-system
        run: mvn test
      
      # Step 7: Build the JAR
      - name: Build JAR
        working-directory: ./modern-system
        run: mvn package -DskipTests
      
      # Step 8: Upload the JAR as an artifact for manual deployment
      - name: Upload JAR artifact
        id: artifact
        uses: actions/upload-artifact@v3
        with:
          name: banking-modern-build-${{ github.run_number }}
          path: modern-system/target/*.jar
          retention-days: 30
      
      # Step 9: Create build info file for deployment scripts
      - name: Create build info
        run: |
          echo "BUILD_NUMBER=${{ github.run_number }}" > build-info.txt
          echo "COMMIT_SHA=${{ github.sha }}" >> build-info.txt
          echo "BRANCH=${{ github.ref_name }}" >> build-info.txt
          echo "TIMESTAMP=$(date -u +%Y-%m-%dT%H:%M:%SZ)" >> build-info.txt
      
      # Step 10: Upload build info
      - name: Upload build info
        uses: actions/upload-artifact@v3
        with:
          name: build-info-${{ github.run_number }}
          path: build-info.txt
          retention-days: 30
      
      # Step 11: Comment on PR with build status (if this is a PR)
      - name: Comment PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: 'âœ… Build #${{ github.run_number }} completed successfully!\n\nArtifact: `banking-modern-build-${{ github.run_number }}`\n\nReady for manual deployment when approved.'
            })

  # Security scanning job (runs in parallel with build)
  security-scan:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Run security scan
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: './modern-system'
          format: 'sarif'
          output: 'trivy-results.sarif'
      
      # Upload security results to GitHub Security tab
      - name: Upload security results
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'
